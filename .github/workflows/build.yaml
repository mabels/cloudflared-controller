name: go-build

on:
  pull_request:
  push:

  schedule:
    - cron: "3 3 * * 6"

jobs:
  build:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        include:
          - platform: ubuntu-latest

    name: Build ${{ join(matrix.platform, ',') }} cloudflared-controller
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Get Current tag'
        id: currentTag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        #if: ${{ github.event_name == 'schedule' }}
        with:
          prefix: v

      - uses: actions/checkout@v3
        #if: ${{ github.event_name == 'schedule' }}
        with:
          ref: ${{ steps.currentTag.outputs.tag }}
     
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.5.0

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Get Latest Cloudflared Version
        run: |
          node .github/workflows/query_versions.js cloudflare/cloudflared | tee -a $GITHUB_ENV
          echo "TAG=$(echo ${{ secrets.GH_TOKEN }} | sed s/.*v/v/)" | tee -a $GITHUB_ENV

      - name: Set up Docker Buildx
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        #if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Check image
        id: image_exists
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          registry: ghcr.io
          repository: mabels/cloudflared-controller
          tag: ${{ env.TAG }}-cfd${{ env.CLOUDFLARE_CLOUDFLARED_VERSION }}

      - name: Run GoReleaser RELEASE
        uses: goreleaser/goreleaser-action@v4
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CLOUDFLARE_CLOUDFLARED_VERSION: ${{ env.CLOUDFLARE_CLOUDFLARED_VERSION }}

#      - name: Run GoReleaser DEV
#        uses: goreleaser/goreleaser-action@v4
#        with:
#          version: latest
#          tags: dev
#          args: release --clean
#        env:
#          GORELEASER_CURRENT_TAG: dev
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#           CLOUDFLARE_CLOUDFLARED_VERSION: ${{ env.CLOUDFLARE_CLOUDFLARED_VERSION }}

      # - name: Run GoReleaser Nightly
      #   uses: goreleaser/goreleaser-action@v4
      #   if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      #   with:
      #     version: latest
      #     args: release --clean --nightly
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

