name: go-build

on:
  pull_request:
  push:

  schedule:
    - cron: "3 3 * * 6"

jobs:
  build:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        include:
          - platform: ubuntu-latest

    name: Build ${{ join(matrix.platform, ',') }} cloudflared-controller
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Get Current tag'
        id: currentTag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        #if: ${{ github.event_name == 'schedule' }}
        with:
          prefix: v

      - uses: actions/checkout@v3
        #if: ${{ github.event_name == 'schedule' }}
        with:
          ref: ${{ steps.currentTag.outputs.tag }}
     
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.5.0

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Get Latest Cloudflared Version
        run: |
          node .github/workflows/query_versions.js cloudflare/cloudflared | tee -a $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Check image
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]
          then
            CTRL_VERSION=refs/tags/v${{ env.CONTROLLER_VERSION }} 
          else
            CTRL_VERSION=refs/tags/d$(git rev-parse --short HEAD)"   
          fi
          if docker manifest inspect ghcr.io/mabels/cloudflared-controller:${CTRL_VERSION}-cfd${{ env.CLOUDFLARE_CLOUDFLARED_VERSION }}
          then
            echo "SKIP-RELEASE"
          else
            echo "RELEASE_VERSION=latest"
            echo "BUILD_VERSION=refs/tags/${CTRL_VERSION}-cfd${{ env.CLOUDFLARE_CLOUDFLARED_VERSION }}" | tee -a $GITHUB_ENV
          fi

      - name: Run GoReleaser RELEASE
        if: ${{ env.BUILD_VERSION != '' }}
        uses: goreleaser/goreleaser-action@v4
        with:
          version: ${{ env.RELEASE_VERSION }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_REF: ${{ env.BUILD_VERSION }}
          CLOUDFLARE_CLOUDFLARED_VERSION: ${{ env.CLOUDFLARE_CLOUDFLARED_VERSION }}


